// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	service2 "github.com/PraveenGongada/shortly/internal/application/service"
	"github.com/PraveenGongada/shortly/internal/domain/shared/logger"
	service3 "github.com/PraveenGongada/shortly/internal/domain/url/service"
	"github.com/PraveenGongada/shortly/internal/domain/user/service"
	"github.com/PraveenGongada/shortly/internal/infrastructure/auth"
	"github.com/PraveenGongada/shortly/internal/infrastructure/cache/redis"
	"github.com/PraveenGongada/shortly/internal/infrastructure/http/cookie"
	"github.com/PraveenGongada/shortly/internal/infrastructure/http/handler"
	"github.com/PraveenGongada/shortly/internal/infrastructure/persistence/postgres"
)

// Injectors from injectors.go:

func InitializeApplication(domainLogger logger.Logger) (*Application, error) {
	userValidator := service.NewValidator()
	passwordHasher := service.NewHasher()
	databaseConfig := ProvideDatabaseConfig()
	store := postgres.NewPostgresClient(domainLogger, databaseConfig)
	userRepository := postgres.NewUserRepository(store, domainLogger)
	authConfig := ProvideAuthConfig()
	tokenGenerator := auth.NewJwtTokenGenerator(domainLogger, authConfig)
	userService := service2.NewUserService(userValidator, passwordHasher, userRepository, tokenGenerator, domainLogger)
	urlConfig := ProvideURLConfig()
	shortCodeGenerator := NewGenerator(urlConfig)
	urlValidator := service3.NewValidator()
	urlRepository := postgres.NewURLRepository(store, domainLogger)
	redisConfig := ProvideRedisConfig()
	client := NewRedisClient(domainLogger, redisConfig)
	urlCache := redis.NewURLCache(client, domainLogger)
	urlService := NewURLService(shortCodeGenerator, urlValidator, urlRepository, urlCache, domainLogger, urlConfig)
	manager := cookie.NewCookieManager(authConfig)
	handlerHandler := handler.New(userService, urlService, manager, domainLogger, authConfig)
	application := &Application{
		Handler:        handlerHandler,
		PostgresClient: store,
		RedisClient:    client,
	}
	return application, nil
}

// injectors.go:

type Application struct {
	Handler        *handler.Handler
	PostgresClient postgres.Store
	RedisClient    redis.Client
}
